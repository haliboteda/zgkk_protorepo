syntax = "proto3";
option java_multiple_files = true;
package webbusinessd;

service WebBusiness {

  rpc Login(LoginRequest) returns (LoginResponse);  // host/sys/login
  rpc Logout(LogoutRequest) returns (LogoutResponse);// host/sys/logout
  rpc UpdatePwd(UpdatePwdRequest) returns (UpdatePwdResponse);// host/sys/updatepwd

  rpc Test(TestRequest) returns (TestResponse);//host/test/teset

  rpc ListEmployee(ListEmployeeRequest) returns (ListEmployeeResponse);// host/list_employee
  rpc CreateEmployee(CreateEmployeeRequest) returns (CreateEmployeeResponse);// host/create_employee
  rpc UpdateEmployee(UpdateEmployeeRequest) returns (UpdateDepartmentResponse);// host/update_employee
  rpc GetEmployee(GetEmployeeRequest) returns (GetEmployeeResponse);
  //department
  rpc ListDepartment(ListDepartmentRequest) returns (ListDepartmentResponse);// host/list_department
  rpc CreateDepartment(CreateDepartmentRequest) returns (CreateDepartmentResponse);// host/create_department
  rpc UpdateDepartment(UpdateDepartmentRequest) returns (UpdateDepartmentResponse);// host/update_department
  rpc DeleteDepartment(DeleteDepartmentRequest) returns (DeleteDepartmentResponse);// host/delete_department
  //terminal
  rpc ListTerminal(ListTerminalRequest) returns (ListTerminalResponse);// host/list_terminal
  rpc RegisterTerminal(RegisterTerminalRequest) returns (RegisterTerminalResponse);// host/register_terminal
  rpc AuthoriseTerminal(AuthoriseTerminalRequest) returns (AuthoriseTerminalResponse);// host/authorise_terminal
  rpc SendHeartBeat(SendHeartBeatRequest) returns (SendHeartBeatResponse);// host/send_heart_beat
  //report
  rpc GetReportDetail(GetReportDetailRequest) returns (GetReportDetailResponse);//host/get_report_detail
  rpc FinishReport(FinishReportRequest) returns (FinishReportResponse);//host/finish_report
  rpc CreateReport(CreateReportRequest) returns (CreateReportResponse);//host/create_report
  rpc UpdateReport(UpdateReportRequest) returns (UpdateReportResponse);//host/update_report
  //valve
  rpc ListValve(ListValveRequest) returns (ListValveResponse);//host/list_valve
  rpc CreateValve(CreateValveRequest) returns (CreateValveResponse);//host/create_valve

  rpc UploadFile(UploadFileRequest) returns (UploadFileResponse);//host/file/upload
}


message EmptyMessage{}

message BaseListArg {
  bool count_only = 1;    // 是否纯计数
  int32 start = 2;        // take [start, start+count]
  int32 count = 3;
}

message BaseResponse {
  int32 code = 1;
  string msg = 2;
}
message TestRequest { string code = 1; }
message TestResponse { string code = 1; }
//
message SysUser {
  int32 id = 1;
  int32 department_id = 2;
  int32 employee_id = 7;
  string nick_name = 3;
  string username = 4;
  string password = 5;
  int32 is_active = 6;
}


// system
message LoginRequest {
  string user_name = 1;
  string enc_password = 2;
}

message LoginResponse {
  BaseResponse rsp = 1;
  string token = 2;
}

message LogoutRequest {
}
message LogoutResponse {
  BaseResponse rsp = 1;
}

message UpdatePwdRequest {
  string enc_password = 1;      // 旧密码
  string new_enc_password = 2;  // 新密码
  string renew_enc_password = 3;  // 确认密码
}

message UpdatePwdResponse {
  BaseResponse rsp = 1;
}

enum RespCode{
  SUCC = 0;
  FAIL = 1;
}
// 每个Role拥有的具体权限写死在代码里
enum SysRole {
  Dummy = 0;
  Admin = 1;    // 1、管理人员 RW
  DepartmentAdmin = 2; // 2、部门管理员 RW
  Tester = 3; // 3、校验员 RW
  Checker = 4; // 4、审查员 RW
  Approver = 5; // 5、审核员 RW
  Staff = 6; // 普通员工
}

message Employee {
  enum EmployeeType {
    ET_Dummy = 0;
    ET_Admin = 1; //
    ET_Tester = 2; // 校验员
    ET_Checker = 3; // 校核员
    ET_Approver = 4; // 审核员
    ET_Normal = 5;// 普通
  }
  int32 id = 1;
  int32 department_id = 2;
  EmployeeType type = 3;
  string name = 4;
  string work_number = 5;
  string avatar_url = 6;
  int64 create_time = 7;
  int32 create_by = 8;
}

message CreateEmployeeRequest {
  Employee employee = 1;
}

message CreateEmployeeResponse {
  BaseResponse rsp = 1;
}

message UpdateEmployeeRequest {
  Employee employee = 1;
}

message UpdateEmployeeResponse {
  BaseResponse rsp = 1;
}

message GetEmployeeRequest {
  int32 id = 1;
}

message GetEmployeeResponse {
  BaseResponse rsp = 1;
  Employee employee = 2;
}

message ListEmployeeRequest {
  BaseListArg list_arg = 1;
  repeated int32 department_id = 2;
  string name = 3;
  int32 first_pos = 4;
  int32 second_pos = 5;
  string id_card = 8; // 身份证
}

message ListEmployeeResponse {
  BaseResponse rsp = 1;
  repeated Employee employee_list = 2;
  int32 count = 3;
}


// 部门
message Department {
  int32 id = 1;
  int32 parent_id = 2;
  string name = 3;
  string code = 5;
  int64 create_at = 4;
}

message CreateDepartmentRequest {
  string name = 1;
  int32 parent_id = 2;
}

message CreateDepartmentResponse {
  BaseResponse rsp = 1;
}

message UpdateDepartmentRequest {
  int32 id = 1;
  int32 parent_id = 2;
  string name = 3;
}

message UpdateDepartmentResponse {
  BaseResponse rsp = 1;
}

message DeleteDepartmentRequest {
  int32 id = 1;
}

message DeleteDepartmentResponse {
  BaseResponse rsp = 1;
}

message ListDepartmentRequest {
  int32 parent_id = 1;
  BaseListArg list_arg = 2;
  string code = 3;
}

message ListDepartmentResponse {
  BaseResponse rsp = 1;
  repeated Department department_list = 2;
  int32 count = 3;
}
//
message Terminal {
  int32 id = 1;
  string name = 2;
  int32 department_id = 3;
  string code = 4;// 终端编号
  string model = 9; // 终端型号
  string sensors = 5;//json格式 sensor列表 { 名称/量程name: 300, 传感器种类type: , 传感器编号code:}
  string mac_addr = 6;
  int32 is_active = 7;
  int64 create_time = 8;
  //
  repeated Report todo_reports = 15;
}

message UpdateTerminalRequest {
  Terminal terminal = 1;
}

message UpdateTerminalResponse {
  BaseResponse rsp = 1;
}

message RegisterTerminalRequest {
  Terminal terminal = 1;
  //string department_code = 2;
}
message RegisterTerminalResponse {
  BaseResponse rsp = 1;
  int32 terminal_id = 2;
  string terminal_code = 3;
  int32 department_id = 4;
}

message SendHeartBeatRequest {
  int32 terminal_id = 1;
  //string department_code = 2;
}
message SendHeartBeatResponse {
  BaseResponse rsp = 1;
  repeated int32 report_ids = 2;
  string terminal_code = 3;
}

message ListTerminalRequest{
  BaseListArg list_arg = 1;
  int32 department_id = 2;
  int32 terminal_id = 3;
}

message ListTerminalResponse {
  BaseResponse rsp = 1;
  repeated Terminal terminal_list = 2;
  int32 count = 3;
}
//report
message Report {
  enum ReportStatus {
    RS_Dummy = 0;
    RS_To_Check = 1;// 待校验
    RS_Checking = 2;// 校验中
    RS_To_Approval = 3;// 待审核
    RS_Finished = 4;// 报告已出
    RS_Invalid = 5;// 作废
  }
  int32 id = 1;
  int32 local_id = 2;
  int32 department_id = 3;
  string seqNo = 4;  //库序号

  Terminal terminal = 5;  //由哪台终端测量
  ReportStatus status = 6;
  string rpt_code = 7;  //报告编号
  string user_addr = 8;
  string user_contact = 9;
  string user_phone = 10;
  string user_name = 11;
  string device_code = 12;  //设备代码
  string device_name = 13;  //装置名称
  string position = 14;  //安装位置
  string exec_std = 15;  //执行标准
  //string terminal_code = 16;  //仪器编号
  //string terminal_type = 17;  //校验设备型号
  string gauge_num = 18;  //压力表编号
  string press_from = 19;
  string press_to = 20;
  int32 num_format = 21;  //数据精度
  string file_path = 22;  //报告存放路径
  int64 next_date = 23;
  string valid_year = 24;
  Employee tester = 25;
  Employee checker = 26;
  Employee approver = 27;
  int64 create_time = 28;
  int32 create_by = 29;
  int64 inspection_date = 30;  // 阀门校验日期
  int64 last_inspection_date = 31;  // 上次阀门校验日期

  string medium = 32;  //工作介质
  string medium_check = 33;  //校验介质
  Valve v = 34;  //阀门型号信息
  string temperature = 35;
  string temperature_medium = 36;
  string tank_code = 37;  // 储罐编号
  string tank_top = 38;  // 罐顶形式
  string inspection_addr = 39;  // 检验地点
  //
  Record_Safety r_s = 40;  //安全阀相关数据
  Record_Breathe r_b = 41;  //呼吸阀相关数据
}

message GetReportDetailRequest {
  int32 report_id = 1;
  string report_code = 3;
  //string department_code = 2;
}
message GetReportDetailResponse {
  BaseResponse rsp = 1;
  Report report = 2;
}
message FinishReportRequest {
  Report report = 1;
  //string department_code = 3;
}
message FinishReportResponse {
  BaseResponse rsp = 1;
}
message CreateReportRequest {
  Report report = 1;
}
message CreateReportResponse {
  BaseResponse rsp = 1;
  int32 report_id = 2;
}
message UpdateReportRequest {
  Report report = 1;
}
message UpdateReportResponse {
  BaseResponse rsp = 1;
}
// ValveAdjt
message ValveAdjt {
  enum SELFLAG { 
    VA_NONE = 0;
    VA_SELF = 1;
    VA_VALVE = 2 ;
  }
  string id = 1;
  SELFLAG flag = 2;
  string numFormat = 3;// default "#.###"
  double Adjment_psit_d = 4;
  double Adjment_negt_d = 5;
  double Adjment_psit_s = 6;
  double Adjment_negt_s = 7;
  string Adjmenttime = 8;

}
// Valve
message Valve {
  enum Category { 
    VC_NONE = 0;
    VC_Safety = 1000;// 安全阀 - 总称
    VC_Breathe = 2000 ;//呼吸阀 - 总称
    VC_Breathe_Normal = 2001 ;//呼吸阀 普通常压
    VC_Breathe_LowTemp = 2002 ;//呼吸阀 低温先导式
    VC_Breathe_Hydra = 2003 ;//呼吸阀 液压式
  }
  int32 id = 1;
  string name = 2;          // 商品名称
  string specification = 3; // 规格
  string material = 4;      // 材质
  string code = 5;          // 阀门编号
  string p_license = 6;     // 许可证编号
  string kind = 7;          // 阀门类型(安全阀：弹簧式、先导式、重锤式) 旧名valveType
  string model = 8;         // 阀门型号 旧名valveTypeNo
  Category category = 9;           // 阀门类型 1000-1999安全阀 2000-2999呼吸阀
  string product_date = 10; // 出厂日期
  string oem_name = 11;     // 制造单位
  string DN = 12;           // 公称通径
  string base_rd = 13;      // 阀座口径
  string PS = 14;           // 阀门的整定压力 即要求整定压力
  string sealed_area = 15;  // 密封面积
  string sealed_rd = 16;    // 密封直径
  string norminal_p = 17;   // 公称压力
  string sealed_rd_o = 18;  // 密封外径
  string sealed_rd_i = 19;  // 密封内径
  string flow_dia = 20;     // 流道直径
  string sterm_size = 21;   // 阀杆螺纹尺
  string sterm_height = 22; // 阀杆外露高
  int32 is_active = 23;
  int64 create_time = 24;
  int32 create_by = 25;
  int64 update_time = 26;
  string singleC = 27;      // 单圈变量
  ValveAdjt adjt = 28;
  // Breathe
  string p_pos = 29;        // 呼出/正压
  string p_neg = 30;        // 吸入/负压
  string struct_type = 31;  // 结构形式
  int64 installed_time = 32;  // 安装日期
}

// 用于安全阀
message Record_Safety {
  int32 id = 1;
  string rd_code = 2;
  string type = 3;  //校验方式

  string p0 = 4;
  string ps = 5;
  string sealed_p = 6;
  string test_p = 7;
  string err = 8;
  string result = 9;
  string outside_check = 10;
  string dissemble_check = 11;
  string maintenance = 12;
  string ps1 = 13;
  string ps2 = 14;
  string ps3 = 15;
  string lift1 = 16;
  string lift2 = 17;
  string lift3 = 18;
  string dis_p1 = 19;
  string dis_p2 = 20;
  string dis_p3 = 21;
  string reseat_p1 = 22;
  string reseat_p2 = 23;
  string reseat_p3 = 24;
  string conclusion = 25;
  string remarks = 26;
  int64 create_time = 27;
  string file_path = 28;  //测量记录文件路径
  string result_path = 29;  //测量结果文件路径
  int32 report_id = 30;
  
  //下面适用于带密封测试的校验
  enum SealedType { 
    ST_NONE = 0;
    ST_Bubble = 1;
    ST_Keep = 2;
  }
  string rlt1 = 31;        // 传感器 1 的试验结论
  string rlt2 = 32;        // 传感器 2 的试验结论
  string rlt3 = 33;        // 传感器 3 的试验结论
  SealedType sealedType = 34; // 密封测试类型: 气泡 保压
  double b_ps = 35;  // 密封测试时压力
  int32 b_t_i = 36;  // 密封测试标准时间 秒
  int32 b_t = 37;    // 密封测试时间 秒
  double r_v_i = 38; //密封泄露量 标准值
  double r_v = 39;   //密封泄露量 实际值
  string rlt_b = 40; //密封测试结论
  int32 bubble_num_input = 41; // 气泡标准个数
  int32 bubble_num = 42; // 气泡个数
  double p1 = 43;    // 密封测试时开始压力
  double p2 = 44;    // 密封测试时结束压力
  string pic = 45;   // 测量截图路径
  string bubble_pic = 46; // 密封试验截图路径
}
// 用于呼吸阀
message Record_Breathe { 
  int32 id = 1;
  int64 create_time = 2;
  string file_path = 3;  //测量记录文件路径
  int32 report_id = 22;
  double pos_p_std = 4;        // 呼出/正压 标准值
  double neg_p_std = 5;        // 吸入/负压 标准值
  double pos_p_act = 6;        // 呼出/正压 实际值
  double neg_p_act = 7;        // 吸入/负压 实际值
  string pos_rlt = 8;          // 呼出/正压 试验结论
  string neg_rlt = 9;          // 吸入/负压 试验结论
  double pos_flow_std = 10;    // 呼出/正压 流量 标准值
  double neg_flow_std = 11;    // 吸入/负压 流量 标准值
  double pos_flow_act = 12;    // 呼出/正压 流量 实际值
  double neg_flow_act = 13;    // 吸入/负压 流量 实际值
  string pos_flow_rlt = 14;    // 呼出/正压 流量 试验结论
  string neg_flow_rlt = 15;    // 吸入/负压 流量 试验结论
  string pos_leak_std = 16;    // 呼出/正压 泄漏 标准值
  string neg_leak_std = 17;    // 吸入/负压 泄漏 标准值
  string pos_leak_act = 18;    // 呼出/正压 泄漏 实际值
  string neg_leak_act = 19;    // 吸入/负压 泄漏 实际值
  string pos_leak_rlt = 20;    // 呼出/正压 泄漏 试验结论
  string neg_leak_rlt = 21;    // 吸入/负压 泄漏 试验结论
}

message ListValveRequest {
  BaseListArg list_arg = 1;
  string dn = 2;
  string ps_from = 3;
  //int32 ps_to = 4;
  string oem = 5;
  string type = 6;
}

message ListValveResponse {
  BaseResponse rsp = 1;
  repeated Valve valve_list = 2;
  int32 count = 3;
}

message CreateValveRequest {
  Valve valve = 1;
}

message CreateValveResponse {
  BaseResponse rsp = 1;
  int32 id = 2;
}

message UploadFileRequest {
  int32 report_id = 1;
  //string department_code = 2;
  string employee_work_num = 3;
}

message UploadFileResponse {
  BaseResponse rsp = 1;
  string file_path = 2;
}

message AuthoriseTerminalRequest {
  string terminal_name = 1;// 
  string terminal_type = 2;// 
}

message AuthoriseTerminalResponse {
  BaseResponse rsp = 1;
  string token = 2;
  string code = 3;
}

/////////////////////////////////////////////
message Sensor {

}
